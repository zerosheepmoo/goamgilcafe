/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(self, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src2/index.ts":
/*!***********************!*\
  !*** ./src2/index.ts ***!
  \***********************/
/*! flagged exports */
/*! export DataBuilder [provided] [maybe used in main (runtime-defined)] [usage prevents renaming] */
/*! export __esModule [provided] [maybe used in main (runtime-defined)] [usage prevents renaming] */
/*! other exports [not provided] [maybe used in main (runtime-defined)] */
/*! runtime requirements: __webpack_exports__ */
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DataBuilder = void 0;\nvar DataBuilder = /** @class */ (function () {\n    function DataBuilder(rootPath) {\n        this._rootPath = './data/';\n        this._categoryList = [];\n        this._itemList = {};\n        this._items = {};\n        this._viewerConID = '';\n        this._viewerListeners = {};\n        this._isViewOpen = false;\n        this._categoryPage = 0;\n        this._isPathToolOpen = false;\n        this._isEditItemViewOpen = false;\n        this._isPreviousInputExist = false;\n        if (rootPath) {\n            this._rootPath = rootPath;\n        }\n    }\n    Object.defineProperty(DataBuilder.prototype, \"isViewerOpen\", {\n        get: function () {\n            return this._isViewOpen;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * 실제 데이터를 로드한다.\n     */\n    DataBuilder.prototype.load = function () {\n        // let path = this._rootPath + 'coffee/americano.json';\n        var res = {};\n        var _loop_1 = function (i) {\n            var itemNames = this_1._itemList[this_1._categoryList[i]];\n            var _loop_2 = function (j) {\n                var path = \"\" + this_1._rootPath + this_1._categoryList[i] + \"/\" + itemNames[j] + \".json\";\n                var request = new XMLHttpRequest();\n                request.open('GET', path, true);\n                request.responseType = 'json';\n                request.send();\n                var _this = this_1;\n                // request 후\n                request.addEventListener('load', function () {\n                    _this._items[itemNames[j]] = request.response;\n                });\n            };\n            for (var j = 0; j < itemNames.length; j++) {\n                _loop_2(j);\n            }\n        };\n        var this_1 = this;\n        for (var i = 0; i < this._categoryList.length; i++) {\n            _loop_1(i);\n        }\n    };\n    /**\n     * 뷰어를 로드한다.\n     *\n     * @param containerID - 컨테이너 아이디\n     */\n    DataBuilder.prototype.loadViewer = function (containerID) {\n        if (!this._isViewOpen) {\n            var container = document.getElementById(containerID);\n            this._viewerConID = containerID;\n            this._createPathItem(container);\n            this._isViewOpen = true;\n        }\n    };\n    /**\n     * 뷰어를 제거한다.\n     */\n    DataBuilder.prototype.removeViewer = function () {\n        if (this._isViewOpen) {\n            if (this._isPathToolOpen) {\n                this._closePathTool();\n            }\n            var con = document.getElementById(this._viewerConID);\n            if (con) {\n                this._removeViewListeners();\n                con.innerHTML = '';\n                this._isViewOpen = false;\n            }\n            else {\n                throw new Error('There is no such view container: ' + this._viewerConID);\n            }\n        }\n    };\n    /**\n     * 카테고리를 추가한다.\n     *\n     * @param name - 카테고리명\n     */\n    DataBuilder.prototype.addCategory = function (name) {\n        this._categoryList.push(name);\n        this._itemList[name] = [];\n    };\n    /**\n     * 카데고리들을 추가한다.\n     *\n     * @param names - 카테고리 이름들\n     */\n    DataBuilder.prototype.addCategories = function (names) {\n        var len = names.length;\n        for (var i = 0; i < len; i++) {\n            this.addCategory(names[i]);\n        }\n    };\n    /**\n     * 아이템들을 지정한 카테고리에 추가한다.\n     *\n     * @param category - 카테고리명\n     * @param names - 해당 카테고리에 등록할 아이템 이름\n     */\n    DataBuilder.prototype.addItems = function (category, names) {\n        if (this._itemList[category]) {\n            for (var i = 0; i < names.length; i++) {\n                this._itemList[category].push(names[i]);\n            }\n        }\n    };\n    /**\n     * 아이템을 얻는다.\n     *\n     * @param itemName - 아이템 이름\n     */\n    DataBuilder.prototype.getItem = function (itemName) {\n        return this._items[itemName];\n    };\n    /**\n     * 데이터 편집하기 창 열기\n     *\n     * @param item - 아이템 데이터\n     * @param expression - 표현식\n     */\n    DataBuilder.prototype.openEditDataView = function (item) {\n        if (!this._isEditItemViewOpen) {\n            var _this_1 = this;\n            var _item = item;\n            var itemCon = document.createElement('div');\n            itemCon.id = 'di-container';\n            // 데이터 편집기 컨테이너\n            var dataEdittingCon_1 = document.createElement('div');\n            dataEdittingCon_1.id = 'di-edit-con';\n            // 데이터 디스플레이\n            var dataDisplay = document.createElement('div');\n            dataDisplay.id = 'di-display';\n            // 계산해서 뭘 선택했는지 보여주기\n            var showItemData_1 = function () {\n                _this_1._showDataDisplay(item);\n                if (_this_1._isPreviousInputExist) {\n                    _this_1._removeViewListener('data-edit');\n                    dataEdittingCon_1.innerHTML = '';\n                    _this_1._isPreviousInputExist = false;\n                }\n            };\n            // 아이템 블록 컨테이너\n            var itemBlockCon = document.createElement('div');\n            itemBlockCon.id = 'di-item-block-con';\n            // 아이템 블럭 스타일 클래스 명\n            var ITEMBLOCK = 'd-item-block';\n            // 모든 데이터 보여주기 버튼\n            var allData = document.createElement('div');\n            allData.className = ITEMBLOCK;\n            allData.id = 'di-all-data';\n            allData.innerHTML = 'Show All';\n            this._addViewListener(allData, function (event) {\n                showItemData_1();\n            }, 'show-all-data-view');\n            itemBlockCon.appendChild(allData);\n            // 아이템 키들\n            for (var key in _item) {\n                var itemBlock = document.createElement('div');\n                itemBlock.className = ITEMBLOCK;\n                itemBlock.id = \"di-\" + key;\n                itemBlock.innerHTML = key;\n                this._addViewListener(itemBlock, function (event) {\n                    _this_1._dataEditting(event, item);\n                }, 'edit-data-view');\n                itemBlockCon.appendChild(itemBlock);\n            }\n            // 닫기 버튼\n            var close_1 = document.createElement('div');\n            close_1.className = ITEMBLOCK;\n            close_1.id = 'di-close';\n            close_1.innerHTML = 'X';\n            this._addViewListener(close_1, function (event) {\n                _this_1._closeDataEditting();\n            }, 'close-data-view');\n            itemBlockCon.appendChild(close_1);\n            // 자식 추가\n            itemCon.appendChild(itemBlockCon);\n            itemCon.appendChild(dataDisplay);\n            itemCon.appendChild(dataEdittingCon_1);\n            document.body.appendChild(itemCon);\n            // 일단 전체 데이터 보여주자\n            showItemData_1();\n            this._isEditItemViewOpen = true;\n        }\n    };\n    /**\n     * 탭해서 원하는 데이터를 수정하자.\n     *\n     * @param event - 이벤트\n     * @param item - 아이템 데이터 모델\n     */\n    DataBuilder.prototype._dataEditting = function (event, item) {\n        // key 찾기\n        var dom = event.target;\n        var key = dom.id.substring(3);\n        var _item = item;\n        var val = _item[key];\n        this._showDataDisplay(val);\n        // 에디터\n        var editCon = document.getElementById('di-edit-con');\n        if (this._isPreviousInputExist) {\n            this._removeViewListener('data-edit');\n        }\n        if (editCon) {\n            editCon.innerHTML = '';\n        }\n        var expressionInput = document.createElement('input');\n        expressionInput.type = 'text';\n        expressionInput.id = 'di-exp-input';\n        expressionInput.placeholder = '표현식을 입력하세요...';\n        var expressionSubmit = document.createElement('button');\n        expressionSubmit.innerHTML = '데이터 수정하기';\n        var _this = this;\n        this._addViewListener(expressionSubmit, function (event) {\n            _this.editData(item, expressionInput.value, key);\n        }, 'data-edit');\n        editCon === null || editCon === void 0 ? void 0 : editCon.appendChild(expressionInput);\n        editCon === null || editCon === void 0 ? void 0 : editCon.appendChild(expressionSubmit);\n        _this._isPreviousInputExist = true;\n    };\n    /**\n     * 데이터 수정화면을 닫는다.\n     */\n    DataBuilder.prototype._closeDataEditting = function () {\n        var _a;\n        var dom = document.getElementById('di-container');\n        this._removeViewListener('edit-data-view');\n        this._removeViewListener('close-data-view');\n        this._removeViewListener('show-all-data-view');\n        if (this._isPreviousInputExist) {\n            this._removeViewListener('data-edit');\n            this._isPreviousInputExist = false;\n        }\n        (_a = dom === null || dom === void 0 ? void 0 : dom.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(dom);\n        this._isEditItemViewOpen = false;\n    };\n    DataBuilder.prototype._showDataDisplay = function (val) {\n        var _a;\n        // displaydom 에 보여주기\n        var showText = JSON.stringify(val, null, 4);\n        var displayDOM = document.getElementById('di-display');\n        if (displayDOM) {\n            var fEle = (_a = displayDOM.parentElement) === null || _a === void 0 ? void 0 : _a.children[0];\n            if (fEle) {\n                displayDOM.style.width = fEle.getBoundingClientRect().width + 'px';\n            }\n            displayDOM.innerHTML = \"<pre>\" + showText + \"</pre>\";\n        }\n    };\n    /**\n     * 아이템 데이터를 수정한다.\n     *\n     * @param item - 아이템 데이터 모델\n     * @param expression - 표현식\n     * @param domItemKey - 처음 키값\n     */\n    DataBuilder.prototype.editData = function (item, expression, domItemKey) {\n        var exp = expression;\n        if (domItemKey) {\n            exp = '>' + domItemKey + '>' + exp;\n        }\n        exp = exp.replace(/\\>/g, '$>$');\n        exp = exp.replace(/=/g, '$=$');\n        exp = exp.replace(/\\+/g, '$+$');\n        exp = exp.replace(/-/g, '$-$');\n        exp = exp.replace(/\\s/g, '');\n        var expList = exp.split('$');\n        var len = expList.length;\n        var _item = item;\n        var target = _item;\n        var props = [];\n        // 판정함수\n        var validate = function (val) {\n            if (val.charAt(0) === 'n' && val.charAt(1) === '_') {\n                return Number(val.substring(2));\n            }\n            else if (val.charAt(0) === 'b' && val.charAt(1) === '_') {\n                if (!val.charAt(2)) {\n                    return false;\n                }\n                else if (val.charAt(2) === '0' || val.charAt(2) === 'f') {\n                    return false;\n                }\n                else {\n                    return Boolean(val.substring(2));\n                }\n            }\n            else if (val.charAt(0) === 'o' && val.charAt(1) === '_') {\n                return JSON.parse(val.substring(2));\n            }\n            else {\n                return val;\n            }\n        };\n        for (var i = 0; i < len; i++) {\n            if (expList[i] === '>') {\n                props.push(expList[++i]);\n            }\n            else if (expList[i] === '=' || expList[i] === '+' || expList[i] === '-') {\n                var pmLen = props.length - 1;\n                for (var j = 0; j < pmLen; j++) {\n                    target = target[props[j]];\n                }\n                var val = validate(expList[++i]);\n                if (expList[i - 1] === '+') {\n                    target[props[pmLen]].push(val);\n                }\n                else if (expList[i - 1] === '-') {\n                    var t = target[props[pmLen]];\n                    if (Array.isArray(t)) {\n                        if (t.indexOf(val) > -1) {\n                            t.splice(t.indexOf(val), 1);\n                        }\n                        else if (Number(val) >= 0) {\n                            t.splice(Number(val));\n                        }\n                        else {\n                            t.pop();\n                        }\n                    }\n                    else {\n                        delete target[props[pmLen]];\n                    }\n                }\n                else {\n                    target[props[pmLen]] = val;\n                }\n            }\n        }\n        if (domItemKey) {\n            this._showDataDisplay(_item[domItemKey]);\n        }\n    };\n    /**\n     *\n     * @param container - 패스 아이템의 컨테이너\n     * @param page - 보여주려는 페이지. 미정 시 전체 보여주기\n     */\n    DataBuilder.prototype._createPathItem = function (container, page) {\n        var _this = this;\n        var rootPath = document.createElement('div');\n        rootPath.id = \"d-\" + this._rootPath;\n        rootPath.className = 'd-root';\n        rootPath.innerHTML = this._rootPath;\n        var showView = function (page) {\n            var categoryName = _this._categoryList[page];\n            var catePath = document.createElement('div');\n            catePath.className = 'd-cate-path';\n            catePath.id = \"d-\" + categoryName;\n            catePath.innerHTML = categoryName + \"/\";\n            for (var j = 0; j < _this._itemList[categoryName].length; j++) {\n                var itemName = _this._itemList[categoryName][j];\n                var itemPath = document.createElement('div');\n                itemPath.className = 'd-item-path';\n                itemPath.id = \"d-\" + itemName;\n                itemPath.innerHTML = itemName;\n                _this._addViewListener(itemPath, function (event) { _this._viewItemClick(event); }, 'basic');\n                catePath.appendChild(itemPath);\n            }\n            rootPath.appendChild(catePath);\n        };\n        if (page !== undefined && page > -1) {\n            showView(page);\n        }\n        else {\n            for (var i = 0; i < this._categoryList.length; i++) {\n                showView(i);\n            }\n        }\n        // 페이지 툴 컨테이너\n        // ANCHOR 개발 중\n        var pageToolCon = document.createElement('div');\n        pageToolCon.className = 'd-page-tool-con';\n        pageToolCon.innerHTML = '개발 중...';\n        if (page) {\n            // 페이지 이동\n            var movePageCon = document.createElement('div');\n            var nextPageButton = document.createElement('button');\n            nextPageButton.innerHTML = '다음페이지';\n            var prevPageButton = document.createElement('button');\n            prevPageButton.innerHTML = '이전페이지';\n            movePageCon.appendChild(prevPageButton);\n            movePageCon.appendChild(nextPageButton);\n            // 전체보기 버튼\n            var showAllButton = document.createElement('button');\n            showAllButton.innerHTML = '전체보기';\n            // 페이지 툴 컨테이너에 추가\n            pageToolCon.appendChild(showAllButton);\n            pageToolCon.appendChild(movePageCon);\n        }\n        else {\n            // 카테고리별보기 버튼\n            var byCategoryButton = document.createElement('button');\n            byCategoryButton.innerHTML = '카테고리별로 보기';\n            // 카테고리 선택 버튼\n            var selectCategoryButton = document.createElement('button');\n            selectCategoryButton.innerHTML = '카테고리 선택';\n            // 페이지 툴 컨테이너에 추가\n            pageToolCon.appendChild(byCategoryButton);\n            pageToolCon.appendChild(selectCategoryButton);\n        }\n        container.appendChild(pageToolCon);\n        container.appendChild(rootPath);\n    };\n    DataBuilder.prototype._addViewListener = function (dom, evListener, name, event) {\n        var ev = event !== null && event !== void 0 ? event : 'click';\n        dom.addEventListener(ev, evListener);\n        if (!this._viewerListeners[name]) {\n            this._viewerListeners[name] = { doms: [], event: ev, listener: evListener };\n        }\n        this._viewerListeners[name].doms.push(dom);\n    };\n    DataBuilder.prototype._removeViewListeners = function () {\n        for (var hash in this._viewerListeners) {\n            this._removeViewListener(hash);\n        }\n    };\n    DataBuilder.prototype._removeViewListener = function (hash) {\n        var doms = this._viewerListeners[hash].doms;\n        var ev = this._viewerListeners[hash].event;\n        var listener = this._viewerListeners[hash].listener;\n        var len = doms.length - 1;\n        for (var i = len; i > -1; i--) {\n            doms[i].removeEventListener(ev, listener);\n            doms.pop();\n        }\n    };\n    /**\n     * 실제 뷰어에서 아이템을 클릭했을 때 실행되는 콜백\n     */\n    DataBuilder.prototype._viewItemClick = function (event) {\n        if (event.target) {\n            var domItem = event.target;\n            if (domItem) {\n                var path = \"\" + domItem.parentElement.parentElement.id.substring(2) + domItem.parentElement.id.substring(2) + \"/\" + domItem.id.substring(2);\n                this._closePathTool();\n                this._openPathTool(path);\n            }\n        }\n    };\n    /**\n     * 패스툴바 열기\n     *\n     * @param path - 경로\n     */\n    DataBuilder.prototype._openPathTool = function (path) {\n        if (!this._isPathToolOpen) {\n            // 해당하는 아이템 데이터 뽑아놓기\n            var _this_2 = this;\n            var pathList = path.split('/');\n            var pLen = pathList.length;\n            var fileName_1 = pathList[pLen - 1];\n            var item_1 = _this_2._items[fileName_1];\n            var itemText_1 = JSON.stringify(item_1, null, 4);\n            // 위에 쓰는 거\n            var pathtool = document.createElement('div');\n            pathtool.innerHTML = path;\n            pathtool.id = 'd-tool';\n            // 편집 돔\n            var edit = document.createElement('div');\n            edit.innerHTML = '편집하기';\n            edit.id = 'd-tool-edit';\n            // 편집 리스너\n            this._addViewListener(edit, function (event) {\n                _this_2.openEditDataView(item_1);\n            }, 'view-edit');\n            // 로컬저장하기\n            var save = document.createElement('div');\n            save.innerHTML = '저장하기';\n            save.id = 'd-tool-save';\n            // 저장하기 리스너\n            var downloadToFile_1 = function (content, filename, contentType) {\n                if (contentType === void 0) { contentType = 'application/json'; }\n                var a = document.createElement('a');\n                var file = new Blob([content], { type: contentType });\n                a.href = URL.createObjectURL(file);\n                a.download = filename;\n                a.click();\n                URL.revokeObjectURL(a.href);\n            };\n            this._addViewListener(save, function (event) {\n                downloadToFile_1(itemText_1, fileName_1);\n            }, 'view-save');\n            // 창닫기 돔\n            var close_2 = document.createElement('div');\n            close_2.innerHTML = '창 닫기';\n            close_2.id = 'd-tool-close';\n            // 창닫기 리스너\n            this._addViewListener(close_2, function (event) {\n                _this_2._closePathTool();\n            }, 'tool-close');\n            // 전송하기 돔\n            var send = document.createElement('div');\n            send.innerHTML = '전송하기 (개발 중...)';\n            send.id = 'd-send';\n            // 창닫기 리스너\n            this._addViewListener(send, function (event) {\n                alert('개발 중 입니다!');\n            }, 'send');\n            pathtool.appendChild(edit);\n            pathtool.appendChild(save);\n            pathtool.appendChild(send);\n            pathtool.appendChild(close_2);\n            document.body.appendChild(pathtool);\n            this._isPathToolOpen = true;\n        }\n    };\n    /**\n     * 패스 툴바 닫기\n     */\n    DataBuilder.prototype._closePathTool = function () {\n        var _a, _b, _c, _d;\n        if (this._isPathToolOpen) {\n            if (this._isEditItemViewOpen) {\n                this._closeDataEditting();\n            }\n            var editDOM = document.getElementById('d-tool');\n            var saveDOM = document.getElementById('d-tool-save');\n            var sendDOM = document.getElementById('d-send');\n            var closeDOM = document.getElementById('d-tool-close');\n            this._removeViewListener('view-edit');\n            this._removeViewListener('view-save');\n            this._removeViewListener('send');\n            this._removeViewListener('tool-close');\n            if (editDOM) {\n                editDOM.innerHTML = '';\n                (_a = editDOM.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(editDOM);\n            }\n            if (saveDOM) {\n                saveDOM.innerHTML = '';\n                (_b = saveDOM.parentElement) === null || _b === void 0 ? void 0 : _b.removeChild(saveDOM);\n            }\n            if (sendDOM) {\n                sendDOM.innerHTML = '';\n                (_c = sendDOM.parentElement) === null || _c === void 0 ? void 0 : _c.removeChild(sendDOM);\n            }\n            if (closeDOM) {\n                closeDOM.innerHTML = '';\n                (_d = closeDOM.parentElement) === null || _d === void 0 ? void 0 : _d.removeChild(closeDOM);\n            }\n            this._isPathToolOpen = false;\n        }\n    };\n    return DataBuilder;\n}());\nexports.DataBuilder = DataBuilder;\n\n\n//# sourceURL=webpack://goamgilcafe/./src2/index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	// module exports must be returned from runtime so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__("./src2/index.ts");
/******/ })()
;
});